---
layout: post
title: Java笔记：随机数
tags:
- Java
categories: Java
description: 本章主要讲解如何使用Java来产生随机数，着重介绍Random类的使用。
---

一般来说，在Java中有三种产生随机数的方法：
>1. 利用System.currentTimeMillis()或者System.nanoTime()来获取随机数；
>2. 利用Math.random()来获取随机数；
>3. 利用Random类来获取随机数。  

##利用System.currentTimeMillis()或者System.nanoTime()来获取随机数  
System.currentTimeMillis()产生一个当前的毫秒，这个毫秒其实就是自1970年1月1日0时起的毫秒数，Date()其实就是相当于Date(System.currentTimeMillis());因为Date类还有构造Date(long date)，用来计算long秒与1970年1月1日之间的毫秒差。  

System.nanoTime()产生一个当前的纳秒，这个纳秒数是基于cpu核心的时钟周期来计时，它的开始时间是不确定的。

##利用Math.random()来获取随机数
通过Math.random()来获取随机数，它返回一个0(包含)到1(不包含)之间的double类型的随机数。
要获取int类型的随机数，只需要做简单的转化即可。比如获取[0,100)之间的int整数。方法如下：
```java
1 double d = Math.random();
2 int i = (int)(d * 100);
```

##利用Random类来获取随机数
Random类中实现的随机算法是伪随机，也就是有规则的随机。在进行随机时，随机算法的起源数字称为种子数(seed)，在种子数的基础上进行一定的变换，从而产生需要的随机数字。  
相同种子数的Random对象，相同次数生成的随机数字是完全相同的。也就是说，两个种子数相同的Random对象，第一次生成的随机数字完全相同，第二次生成的随机数字也完全相同。这点在生成多个随机数字时需要特别注意。  
###Random对象的生成
Random类包含两个构造方法，下面依次进行介绍：
>a. public Random()//该构造方法使用一个和当前系统时间对应的相对时间有关的数字作为种子数，然后使用这个种子数构造Random对象。
>b. public Random(long seed)//该构造方法可以通过制定一个种子数进行创建。
示例代码：
```java
Random r = new Random();
Random r1 = new Random(10);
```
**再次强调：种子数只是随机算法的起源数字，和生成的随机数字的区间无关。**
###Random类中的常用方法
Random类中的方法比较简单，每个方法的功能也很容易理解。需要说明的是，Random类中各方法生成的随机数字都是均匀分布的，也就是说区间内部的数字生成的几率是均等的。下面对这些方法做一下基本的介绍：  
>public boolean nextBoolean()//该方法的作用是生成一个随机的boolean值，生成true和false的值几率相等，也就是都是50%的几率。
>public double nextDouble()//该方法的作用是生成一个随机的double值，数值介于[0,1.0)之间。
>public int nextInt()//该方法的作用是生成一个随机的int值，该值介于int的区间，也就是-231到231-1之间。如果需要生成指定区间的int值，则需要进行一定的数学变换，具体可以参看下面的使用示例中的代码。
>public int nextInt(int n)//该方法的作用是生成一个随机的int值，该值介于[0,n)的区间，也就是0到n之间的随机int值，包含0而不包含n。如果想生成指定区间的int值，也需要进行一定的数学变换，具体可以参看下面的使用示例中的代码。
>public void setSeed(long seed)//该方法的作用是重新设置Random对象中的种子数。设置完种子数以后的Random对象和相同种子数使用new关键字创建出的Random对象相同。